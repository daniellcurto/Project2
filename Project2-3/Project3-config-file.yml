AWSTemplateFormatVersion: 2010-09-09
Description: >-
  Cloud configuration file for CEG 3120.  This template will build two Ubuntu servers per project package needs.
Parameters:
  UbuntuInstanceType:
    Description: Ubuntu Server instance type
    Type: String
    Default: t2.micro
    AllowedValues:
      - t2.micro
  KeyName:
    Description: Name of an existing EC2 KeyPair to enable SSH access to the instance
    Type: 'AWS::EC2::KeyPair::KeyName'
    ConstraintDescription: must be the name of an existing EC2 KeyPair.
  SSHLocation:
    Description: ' The IP address range that can be used to access the EC2 instance'
    Type: String
    MinLength: '9'
    MaxLength: '18'
    # could restrict to home (note this is just SSH)
    Default: 0.0.0.0/0
    AllowedPattern: '(\d{1,3})\.(\d{1,3})\.(\d{1,3})\.(\d{1,3})/(\d{1,2})'
    ConstraintDescription: must be a valid IP CIDR range of the form x.x.x.x/x.
Mappings:
  AWSInstanceType2Arch:  # Supported architectures (x64bit only)
    t2.micro:
      Arch: HVM64
  AWSRegionUbuntu: # AMI for Ubuntu server in each supported region 
    us-east-1:   # N. Virginia
      PV64: NOT_SUPPORTED
      #TODO: is this the AMI we want?
      HVM64: ami-06c1d7addb12a814e
      HVMG2: NOT_SUPPORTED
    us-east-2:   # Ohio
      PV64: NOT_SUPPORTED
      HVM64: NOT_SUPPORTED
      HVMG2: NOT_SUPPORTED
Resources:
  VPC:
    Type: 'AWS::EC2::VPC'
    Properties:
      CidrBlock: 10.0.0.0/16
      Tags:
        - Key: Application
          Value: !Ref 'AWS::StackId'
        - Key: Name
          Value: CEG 3120 VPC
  Subnet:
    Type: 'AWS::EC2::Subnet'
    Properties:
      VpcId: !Ref VPC
      CidrBlock: 10.0.0.0/24
      Tags:
        - Key: Application
          Value: !Ref 'AWS::StackId'
        - Key: Name
          Value: CEG 3120 VPC
  # Have not messed with route tables / gateways before.
  # Look to see if anything unique, else move to next
  InternetGateway:
    Type: 'AWS::EC2::InternetGateway'
    Properties:
      Tags:
        - Key: Application
          Value: !Ref 'AWS::StackId'
  AttachGateway:
    Type: 'AWS::EC2::VPCGatewayAttachment'
    Properties:
      VpcId: !Ref VPC
      InternetGatewayId: !Ref InternetGateway
  RouteTable:
    Type: 'AWS::EC2::RouteTable'
    Properties:
      VpcId: !Ref VPC
      Tags:
        - Key: Application
          Value: !Ref 'AWS::StackId'
  Route:
    Type: 'AWS::EC2::Route'
    DependsOn: AttachGateway
    Properties:
      RouteTableId: !Ref RouteTable
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref InternetGateway
  SubnetRouteTableAssociation:
    Type: 'AWS::EC2::SubnetRouteTableAssociation'
    Properties:
      SubnetId: !Ref Subnet
      RouteTableId: !Ref RouteTable
  # will also have 2 servers, keeping naming convention here
  Ubuntu1IPAddress:
    Type: 'AWS::EC2::EIP'
    DependsOn: AttachGateway
    Properties:
      Domain: vpc
      InstanceId: !Ref Ubuntu1Instance
  #Ubuntu2IPAddress:
  #  Type: 'AWS::EC2::EIP'
  #  DependsOn: AttachGateway
  #  Properties:
  #    Domain: vpc
  #    InstanceId: !Ref Ubuntu2Instance
  #WS19IPAddress:
  #  Type: 'AWS::EC2::EIP'
  #  DependsOn: AttachGateway
  #  Properties:
  #    Domain: vpc
  #    InstanceId: !Ref WS19Instance
  # TODO: Setup the security groups needed by our machines
  # SSH, LDAP, HTTP, HTTPS
  LinuxSecurityGroup:
    Type: 'AWS::EC2::SecurityGroup'
    Properties:
      VpcId: !Ref VPC
      GroupDescription: Enable SSH access via port 22, port 80, and open ports 1025 through 2048.
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: '22'
          ToPort: '22'
          # May be wise to go back to top where SSHLocation "variable" was made 
        - IpProtocol: tcp
          FromPort: '22'
          ToPort: '22'
          CidrIp: 0.0.0.0/0 # world access
        - IpProtocol: tcp
          FromPort: '80'
          ToPort: '80'
          CidrIp: 0.0.0.0/0 # world access
        - IpProtocol: tcp
          FromPort: '22'
          ToPort: '22'
          CidrIp: 10.0.0.0/24 # internal network
        - IpProtocol: tcp
          FromPort: '80'
          ToPort: '80'
          CidrIp: 10.0.0.0/24 # internal network
        - IpProtocol: -1
          FromPort: '-1'
          ToPort: '-1'
          CidrIp: 10.0.0.0/16
          
  Ubuntu1Instance:
    Type: 'AWS::EC2::Instance'
    Properties:
      ImageId: !FindInMap 
        - AWSRegionUbuntu
        - !Ref 'AWS::Region'
        - !FindInMap 
          - AWSInstanceType2Arch
          - !Ref UbuntuInstanceType
          - Arch
      InstanceType: !Ref UbuntuInstanceType
      KeyName: !Ref KeyName
      Tags:
        - Key: Application
          Value: !Ref 'AWS::StackId'
        - Key: Name
          Value: CEG 3400 Ubuntu 1
      NetworkInterfaces:
        - GroupSet:
            - !Ref LinuxSecurityGroup
          AssociatePublicIpAddress: 'true'
          DeviceIndex: '0'
          DeleteOnTermination: 'true'
          SubnetId: !Ref Subnet
          PrivateIpAddress: 10.0.0.30
      UserData:
        Fn::Base64:
          !Sub |
            #!/bin/bash -xe
            apt-get update && \
            # reference web solution here to get a silent install working
            apt-get install -y \
              python \
              nmap \
              vim \
              git \
              wget \
              python3-dev \
              ldap-utils && \
              haproxy && \
            
              # settings for HAProxy
               wget https://raw.githubusercontent.com/daniellcurto/Project2/main/Project2-3/haproxy.cfg > /etc/haproxy/haproxy.cfg && \
              echo "OMG this worked" >> /home/ubuntu/hello.txt && \
              echo "Hello World" >> /etc/skel/default.txt && \
              ssh-copy-id ubuntu@10.0.0.25 && \
              -yes && \
              ssh-copy-id ubuntu@10.0.0.30 && \
              -yes && \

              # now we will be updating the websites on both of our webservers at once
              ssh ubuntu@myhaproxy.com && \
              git init --bare ~/project.git && \
              chmod +x post-receive && \
              git remote add scripts/project ubuntu@myhaproxy.com:project.git
              
              git push production master && \
            reboot
            
  Ubuntu2Instance:
    Type: 'AWS::EC2::Instance'
    DependsOn: AttachGateway
    Properties:
      ImageId: !FindInMap 
        - AWSRegionUbuntu
        - !Ref 'AWS::Region'
        - !FindInMap 
          - AWSInstanceType2Arch
          - !Ref UbuntuInstanceType
          - Arch
      InstanceType: !Ref UbuntuInstanceType
      KeyName: !Ref KeyName
      Tags:
        - Key: Application
          Value: !Ref 'AWS::StackId'
        - Key: Name
          Value: CEG 3400 Ubuntu 2
      NetworkInterfaces:
        - GroupSet:
            - !Ref LinuxSecurityGroup
          #AssociatePublicIpAddress: 'true'
          DeviceIndex: '0'
          #DeleteOnTermination: 'true'
          SubnetId: !Ref Subnet
          PrivateIpAddress: 10.0.0.20
      UserData:
        Fn::Base64:
          !Sub |
            #!/bin/bash -xe
            apt-get update && \
            apt-get install -y \
              python \
              nmap \
              vim \
              git \
              wget \
              python3-dev && \
              apache2 && \
              
              # settings for ssh
              mkdir -p $HOME/.ssh && \
              chmod 0700 $HOME/.ssh && \ 
              ssh-keygen && \
              -config && \
              echo -e "\n\n" && \

              wget https://raw.githubusercontent.com/daniellcurto/Project2/main/Project2-3/index-serv1.html /home/ubuntu/ && \
              cp index-serv1.html /var/www/html/index.html && \
              chown ubuntu /var/www/html/
            reboot

  Ubuntu3Instance:
    Type: 'AWS::EC2::Instance'
    DependsOn: AttachGateway
    Properties:
      ImageId: !FindInMap 
        - AWSRegionUbuntu
        - !Ref 'AWS::Region'
        - !FindInMap 
          - AWSInstanceType2Arch
          - !Ref UbuntuInstanceType
          - Arch
      InstanceType: !Ref UbuntuInstanceType
      KeyName: !Ref KeyName
      Tags:
        - Key: Application
          Value: !Ref 'AWS::StackId'
        - Key: Name
          Value: CEG 3400 Ubuntu 3
      NetworkInterfaces:
        - GroupSet:
            - !Ref LinuxSecurityGroup
          #AssociatePublicIpAddress: 'true'
          DeviceIndex: '0' 
          #DeleteOnTermination: 'true'
          SubnetId: !Ref Subnet
          PrivateIpAddress: 10.0.0.25
      UserData:
        Fn::Base64:
          !Sub |
            #!/bin/bash -xe
            apt-get update && \
            apt-get install -y \
              python \
              nmap \
              vim \
              git \
              wget \
              python3-dev && \
              apache2 && \

              # settings for ssh
              mkdir -p $HOME/.ssh && \
              chmod 0700 $HOME/.ssh && \ 
              ssh-keygen && \
              -config && \
              echo -e "\n\n" && \


              wget https://raw.githubusercontent.com/daniellcurto/Project2/main/Project2-3/index-serv2.html /home/ubuntu/ && \
              cp /home/ubuntu/index-serv2.html /var/wwww/html/index.html && \          
            reboot